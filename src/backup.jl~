
export backup, reverse_backup

####################################################################

function backup(f ::IOStream, gene ::IntegerGene)
    write(f, 'I')
    write(f, Int8(length(gene.value)))
    for i in gene.value
        write(f, i)
    end
    write(f, Int8(-length(gene.name)), gene.name)
    return nothing
end

function backup(f ::IOStream, gene ::FloatGene)
    write(f, 'F')
    write(f, gene.m)
    write(f, Int8(length(gene.value)))
    for i in gene.value
        write(f, i)
    end
    for i in gene.range
        write(f, i)
    end
    for i in gene.name
        l = Int8(-length(i))
        write(f, l, i)
    end
    return nothing
end

function backup(f ::IOStream, gene ::BinaryGene)
    write(f, 'B')
    write(f, gene.value)
    write(f, Int8(-length(gene.name)), gene.name)
    return nothing
end

function backup(ngens ::Int64, chrom ::Vector{Individual})
    chromossome = copy(chrom)
    psize = length(chromossome   )
    gsize = length(chromossome[1])
    file = "Backup_GA_$(now())"
    open(file, "w") do f
        write(f, ngens, psize, gsize)
        for i in chromossome
            for j in i
                backup(f, j)
            end
        end
    end
    return nothing
end

function backup(ngens ::Vector{Int64}, chrom ::Vector{Individual})
    return backup(ngens[1], chrom)
end

function backup( ngens ::DArray{Individual,1,Vector{Individual}} ,
                 pop   ::DArray{Individual,1,Vector{Individual}} )
    population = convert(Vector{Individual}, pop)
    generations = findmin(ngens)[1]
    return backup(generations, population)
end

####################################################################

function reverse_backup(filename ::AbstractString)
    f = open(filename, "r")
    
    ngens    = read(f, Int64)
    popsize  = read(f, Int64)
    genesize = read(f, Int64)
    population = Vector{Individual}(undef, popsize)    
    for p in 1:popsize
        population[p] = Individual(undef, genesize)
        for g in 1:genesize
            id = read(f, Char)
            if id == 'I'
                nvals = read(f, Int8)
                bit_vec = BitVector(undef, nvals)
                readbytes!(f, reinterpret(UInt8, bit_vec))
                strsize = -read(f, Int8)
                name = Vector{UInt8}(undef, strsize)
                readbytes!(f, name)
                population[p][g] =
                    IntegerGene(bit_vec, String(name))
            elseif id == 'F'
                m     = read(f, Int64)
                nvals = read(f, Int8 )
                names  = Vector{String }(undef, nvals)
                values = Vector{Float64}(undef, nvals)
                ranges = Vector{Float64}(undef, nvals)
                readbytes!(f, reinterpret(UInt8, values))
                readbytes!(f, reinterpret(UInt8, ranges))
                for i in 1:nvals
                    strsize = -read(f, Int8)
                    name = Vector{UInt8}(undef, strsize)
                    readbytes!(f, name)
                    names[i] = String(name)
                end
                population[p][g] =
                    FloatGene(values, ranges, m, names)
            elseif id == 'B'
                value = read(f, Bool)
                strsize = -read(f, Int8)
                name = Vector{UInt8}(undef, strsize)
                readbytes!(f, name)
                population[p][g] = BinaryGene(value, String(name))
            end
        end    
    end
    
    close(f)
    return ngens, population
end
