
export BinaryGene, IntegerGene, FloatGene, Chromossome
export ga
export AbstractGene

####################################################################

abstract type AbstractGene end

####################################################################

mutable struct BinaryGene <: AbstractGene
    value ::Bool
    
    BinaryGene(value ::Bool) = new(value)
end

function BinaryGene()
    return BinaryGene(rand(Bool))
end

####################################################################

mutable struct IntegerGene <: AbstractGene
    value    ::BitVector
    mutation ::Symbol
    
    function IntegerGene(value ::BitVector, mutation ::Symbol)
        int_func = int_mutate(mutation)
        @eval mutate(gene ::IntegerGene) = int_func(gene.value)
        return new(value, mutation)
    end
end

function IntegerGene(value ::BitVector) 
    return IntegerGene(value, :FM)
end

function IntegerGene(n ::Int64)
    value = BitVector(undef, rand(1:n))
    return IntegerGene(value, :FM)
end

####################################################################

mutable struct FloatGene <: AbstractGene
    value ::Vector{Float64}
    range ::Vector{Float64}
    m     ::Int64
    
    function FloatGene(value ::Vector{Float64} ,
                       range ::Vector{Float64} ,
                       m     ::Int64           )
        if length(value) != length(range)
            error("vectors mush have the same length")
        end
        return new(value, range, m)
    end
end

function FloatGene(value ::Float64, range ::Float64; m ::Int64 = 20)
    return FloatGene(Float64[value], Float64[range], m)
end

function FloatGene(value ::Vector{Float64}, range ::Float64; m ::Int64 = 20)
    vec = Float64[range for i in value]
    return FloatGene(value, vec, m)
end

function FloatGene(value ::Vector{Float64}; m ::Int64 = 20)
    range = rand(Float64, length(value))
    return FloatGene(value, range, m)
end

function FloatGene(n ::Int64)
    value = rand(Float64, n)
    range = rand(Float64, n)
    return FloatGene(value, range, 20)
end

####################################################################

mutable struct Chromossome
    n           ::Int64
    chromossome ::Vector{<:AbstractGene}
    crossover   ::Crossover
    selection   ::Selection
    
    function Chromossome( chromossome ::Vector{<:AbstractGene}  ,
                          cross ::Crossover, select ::Selection )
        n = length(chromossome)        
        return new(n, chromossome, cross, select)
    end
end

function Chromossome( chromossome ::Vector{<:AbstractGene} ;
                      cross       ::Symbol = :SPX          ,
                      select      ::Symbol = :RWS          )
    crossover = Crossover(cross)
    selection = Selection(select)
    return Chromossome(chromossome, crossover, selection)
end

function Chromossome( gene   ::AbstractGene ,
                      cross  ::Crossover    ,
                      select ::Selection    )
    chromossome = AbstractGene[gene]
    return Chromossome(chromossome, cross, select)
end

function Chromossome( gene   ::AbstractGene  ;
                      cross  ::Symbol = :SPX ,
                      select ::Symbol = :RWS )
    crossover = Crossover(cross)
    selection = Selection(select)
    return Chromossome(gene, crossover, selection)
end
